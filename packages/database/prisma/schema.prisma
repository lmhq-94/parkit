// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
  VALET
  MANAGER
}

enum ParkingStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
  DISABLED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  EXPIRED
}

enum EventType {
  ENTRY
  EXIT
  RESERVATION_CREATED
  RESERVATION_CANCELLED
  PAYMENT_RECEIVED
  EVIDENCE_ADDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  BANK_TRANSFER
}

// ========================================
// MODELS
// ========================================

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String?
  email       String?
  website     String?
  logo        String?
  taxId       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  parkings    Parking[]
  reservations Reservation[]
  events      Event[]
  payments    Payment[]

  @@map("companies")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  role      UserRole @default(CLIENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Company relation
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  // Relations
  reservations Reservation[]
  events      Event[]
  payments    Payment[]
  vehicles    Vehicle[]
  notifications Notification[]

  @@map("users")
}

model Vehicle {
  id          String   @id @default(cuid())
  licensePlate String  @unique
  brand       String
  model       String
  year        Int?
  color       String?
  vin         String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // User relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  reservations Reservation[]
  events      Event[]

  @@map("vehicles")
}

model Parking {
  id          String        @id @default(cuid())
  name        String
  description String?
  location    String
  floor       String?
  section     String?
  spotNumber  String
  isActive    Boolean       @default(true)
  status      ParkingStatus @default(AVAILABLE)
  hourlyRate  Decimal       @default(0)
  dailyRate   Decimal       @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Company relation
  companyId   String
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relations
  reservations Reservation[]
  events      Event[]

  @@unique([companyId, spotNumber])
  @@map("parkings")
}

model Reservation {
  id          String            @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  status      ReservationStatus @default(PENDING)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // User relation
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Vehicle relation
  vehicleId   String
  vehicle     Vehicle           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  // Parking relation
  parkingId   String
  parking     Parking           @relation(fields: [parkingId], references: [id], onDelete: Cascade)

  // Company relation
  companyId   String
  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relations
  events      Event[]
  payments    Payment[]

  @@map("reservations")
}

model Event {
  id          String    @id @default(cuid())
  type        EventType
  description String?
  timestamp   DateTime  @default(now())
  metadata    Json?
  createdAt   DateTime  @default(now())

  // User relation (who triggered the event)
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Vehicle relation
  vehicleId   String?
  vehicle     Vehicle?  @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  // Parking relation
  parkingId   String?
  parking     Parking?  @relation(fields: [parkingId], references: [id], onDelete: SetNull)

  // Reservation relation
  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)

  // Company relation
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relations
  evidences   Evidence[]

  @@map("events")
}

model Evidence {
  id          String   @id @default(cuid())
  type        String   // PHOTO, DOCUMENT, VIDEO, etc.
  url         String
  filename    String
  mimeType    String
  size        Int?
  description String?
  createdAt   DateTime @default(now())

  // Event relation
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("evidences")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // User relation
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Reservation relation
  reservationId String?
  reservation   Reservation?  @relation(fields: [reservationId], references: [id], onDelete: SetNull)

  // Company relation
  companyId     String
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model QRCode {
  id          String   @id @default(cuid())
  code        String   @unique
  type        String   // PARKING, VEHICLE, RESERVATION, etc.
  referenceId String   // ID of the referenced entity
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("qr_codes")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        String   // INFO, WARNING, ERROR, SUCCESS
  isRead      Boolean  @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())

  // User relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
} 